<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on jtheol</title><link>https://johnnylowejr.com/blog/go/</link><description>Recent content in Go on jtheol</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright Â© 2024, jtheol</copyright><lastBuildDate>Thu, 20 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://johnnylowejr.com/blog/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Algorithms - Insertion Sort</title><link>https://johnnylowejr.com/algorithms-insertion-sort/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>https://johnnylowejr.com/algorithms-insertion-sort/</guid><description>Insertion Sort Insertion sort is one algorithm to solve the problem of sorting a sequence of numbers in monotonically increasing order. The algorithm creates a sorted sequence of the array one element at a time by inserting each element into its correct sorted position relative to the other elements in the array which have already been sorted.
Implementation in Go package main import &amp;#34;fmt&amp;#34; func main(){ var a = [7]int{7, 1, 6, 3, 25, 10} for i := 1; i &amp;lt; len(a); i++ { var key int = a[i] var j = i - 1 for j &amp;gt;= 0 &amp;amp;&amp;amp; a[j] &amp;gt; key { a[j+1] = a[j] j = j - 1 } a[j+1] = key } fmt.</description></item></channel></rss>